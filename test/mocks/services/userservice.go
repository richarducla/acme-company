// Code generated by mockery v2.14.0. DO NOT EDIT.

package services

import (
	models "acme/internal/models"
	errors "acme/pkg/errors"

	mock "github.com/stretchr/testify/mock"

	service "acme/internal/users/service"
)

// UserService is an autogenerated mock type for the Service type
type UserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *UserService) Create(input service.UserInput) (models.User, *errors.HandlerError) {
	ret := _m.Called(input)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(service.UserInput) models.User); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 *errors.HandlerError
	if rf, ok := ret.Get(1).(func(service.UserInput) *errors.HandlerError); ok {
		r1 = rf(input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.HandlerError)
		}
	}

	return r0, r1
}

// SignIn provides a mock function with given fields: input
func (_m *UserService) SignIn(input service.SignInInput) (*string, *errors.HandlerError) {
	ret := _m.Called(input)

	var r0 *string
	if rf, ok := ret.Get(0).(func(service.SignInInput) *string); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 *errors.HandlerError
	if rf, ok := ret.Get(1).(func(service.SignInInput) *errors.HandlerError); ok {
		r1 = rf(input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.HandlerError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
